// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  researchQueries ResearchQuery[]
  sessions        Session[]
  accounts        Account[]
  contactMessages ContactMessage[]
  apiUsage        ApiUsage[]
  
  // User preferences and metadata
  apiKey          String?   @unique @default(cuid())
  plan            Plan      @default(FREE)
  credits         Int       @default(100)
  emailVerified   DateTime?
  image           String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ResearchQuery {
  id          String   @id @default(cuid())
  userId      String
  query       String   @db.Text
  result      Json?
  status      QueryStatus @default(PENDING)
  credits     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ContactMessage {
  id          String   @id @default(cuid())
  name        String
  email       String
  subject     String
  message     String   @db.Text
  status      ContactStatus @default(NEW)
  userId      String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([status])
  @@index([createdAt])
}

model ApiUsage {
  id          String   @id @default(cuid())
  userId      String
  endpoint    String
  method      String
  statusCode  Int
  credits     Int      @default(0)
  metadata    Json?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([endpoint])
  @@index([createdAt])
}

model RateLimit {
  id          String   @id @default(cuid())
  identifier  String   @unique // IP or userId
  endpoint    String
  count       Int      @default(1)
  windowStart DateTime @default(now())
  
  @@index([identifier, endpoint])
  @@index([windowStart])
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum QueryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  SPAM
}
