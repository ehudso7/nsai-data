name: Elite Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Phase 1: Quality Gates
  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript check
        run: npm run type-check || npx tsc --noEmit
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run security audit
        run: |
          npm audit --production
          npx snyk test --severity-threshold=high || true
      
      - name: Check bundle size
        run: |
          npm run build
          npx bundlesize --config .bundlesizerc.json

  # Phase 2: Testing Suite
  test-suite:
    runs-on: ubuntu-latest
    needs: quality-gates
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            npm run test -- --coverage
          elif [ "${{ matrix.test-type }}" = "integration" ]; then
            npm run test:integration
          elif [ "${{ matrix.test-type }}" = "performance" ]; then
            npm run test:performance
          fi
      
      - name: Upload coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Phase 3: E2E Testing
  e2e-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            playwright-report/
            test-results/

  # Phase 4: Build & Optimize
  build-optimize:
    runs-on: ubuntu-latest
    needs: [test-suite, e2e-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: |
          npm run build
          
      - name: Optimize assets
        run: |
          # Optimize images
          npx sharp-cli optimize public/**/*.{jpg,jpeg,png,webp} --output public/
          
          # Generate critical CSS
          npx critical build/.next/server/pages/*.html --inline
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package.json
            package-lock.json

  # Phase 5: Preview Deployment
  preview-deploy:
    runs-on: ubuntu-latest
    needs: build-optimize
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Deploy to Vercel Preview
        run: |
          npm install -g vercel
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const url = fs.readFileSync('deployment-url.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Preview deployment ready: ${url}`
            });

  # Phase 6: Production Deployment
  production-deploy:
    runs-on: ubuntu-latest
    needs: build-optimize
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://nsai-data.vercel.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
      
      - name: Deploy to Vercel Production
        id: deploy
        run: |
          npm install -g vercel
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "url=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
      
      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json --env-var "base_url=${{ steps.deploy.outputs.url }}"
      
      - name: Purge CDN cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

  # Phase 7: Post-Deploy Monitoring
  post-deploy:
    runs-on: ubuntu-latest
    needs: production-deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          
      - name: Monitor deployment health
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Check health endpoint
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://nsai-data.vercel.app/api/health)
            if [ $response -eq 200 ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed with status $response"
            sleep 10
          done
          
          echo "Health checks failed"
          exit 1
          
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}!
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Phase 8: Rollback Strategy
  rollback:
    runs-on: ubuntu-latest
    needs: post-deploy
    if: failure()
    steps:
      - name: Trigger rollback
        run: |
          echo "Triggering automatic rollback..."
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}
          
      - name: Create incident
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Production deployment failed - ${new Date().toISOString()}`,
              body: `Automatic rollback triggered for commit ${context.sha}`,
              labels: ['incident', 'production', 'urgent']
            });